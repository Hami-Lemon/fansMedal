// Code generated by MockGen. DO NOT EDIT.
// Source: request.go

// Package fans is a generated GoMock package.
package fans

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gjson "github.com/tidwall/gjson"
)

// MockRequest is a mock of Request interface.
type MockRequest struct {
	ctrl     *gomock.Controller
	recorder *MockRequestMockRecorder
}

// MockRequestMockRecorder is the mock recorder for MockRequest.
type MockRequestMockRecorder struct {
	mock *MockRequest
}

// NewMockRequest creates a new mock instance.
func NewMockRequest(ctrl *gomock.Controller) *MockRequest {
	mock := &MockRequest{ctrl: ctrl}
	mock.recorder = &MockRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequest) EXPECT() *MockRequestMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRequest) Get(u string, param M, body io.Reader, header ...E) (*gjson.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{u, param, body}
	for _, a := range header {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*gjson.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRequestMockRecorder) Get(u, param, body interface{}, header ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{u, param, body}, header...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRequest)(nil).Get), varargs...)
}

// Post mocks base method.
func (m *MockRequest) Post(u string, param M, body io.Reader, header ...E) (*gjson.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{u, param, body}
	for _, a := range header {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Post", varargs...)
	ret0, _ := ret[0].(*gjson.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockRequestMockRecorder) Post(u, param, body interface{}, header ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{u, param, body}, header...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockRequest)(nil).Post), varargs...)
}
